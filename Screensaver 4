// Basic awake-asleep
let working: boolean = true

input.onButtonPressed(Button.A, function () {
    working = false
})

input.onButtonPressed(Button.B, function () {
    working = true
})

basic.forever(function () {
    if (working) {
        basic.showString("Awake")
    } else {
        basic.showString("Zzzzz")
    }
})

// Random Number Gen Screensaver Start
if (!working) {
    input.onGesture(Gesture.Shake, function () {
        basic.forever(function () {
            basic.showNumber(Math.randomRange(1, 9))
            basic.pause(1000)
        })
    })
}
// Random Number Gen Screensaver End

//Firework Screensaver Start
if (!working) {
    input.onGesture(Gesture.TiltLeft, function () {
        basic.forever(function () {
            let x = Math.randomRange(0, 4)
            led.plot(x, 4)
            basic.pause(500)
            led.plot(x, 3)
            basic.pause(500)
            led.unplot(x, 4)
            led.plot(x, 2)
            basic.pause(500)
            led.unplot(x, 3)
            led.unplot(x, 2)
            led.plot(x - 1, 2)
            led.plot(x, 3)
            led.plot(x + 1, 2)
            led.plot(x, 1)
            basic.pause(500)
            led.unplot(x - 1, 2)
            led.unplot(x, 3)
            led.unplot(x + 1, 2)
            led.unplot(x, 1)
            led.plot(x - 2, 2)
            led.plot(x, 4)
            led.plot(x + 2, 2)
            led.plot(x, 0)
            led.plot(x - 1, 1)
            led.plot(x - 1, 3)
            led.plot(x + 1, 1)
            led.plot(x + 1, 3)
            basic.pause(500)
            led.unplot(x - 2, 2)
            led.unplot(x, 4)
            led.unplot(x + 2, 2)
            led.unplot(x, 0)
            led.unplot(x - 1, 1)
            led.unplot(x - 1, 3)
            led.unplot(x + 1, 1)
            led.unplot(x + 1, 3)
        })
    })
}
// Firework Streensaver End

// Rain Screensaver Start
// Code written by Ivo Georgiev

// Extend the LedSprite class:
// 1. To create the illusion of depth, "farther" raindrops are slower and dimmer.
// 2. Since there is no way to control concurrency explicitly in TypeScript,
//    the speed is controlled by how many times fall() doesn't produce motion.
// 3. The brightness values are chosen to produce maximum visual difference, but
//    this depends on the lighting.
if (!working) {
    input.onGesture(Gesture.TiltRight, function () {
        class Raindrop extends game.LedSprite {
            private distance: number
            private freq: number
            private brightLevels: number[] = [240, 180, 60, 30, 1]
            constructor(x: number, y: number, d: number) {
                super(x, y)
                this.distance = d
                this.freq = 0
            }
            setDist(d: number) {
                this.distance = d
                this.freq = 0
            }
            fall() {
                this.setBrightness(this.brightLevels[this.distance - 1])
                if (this.freq == this.distance) {
                    this.move(1)
                }
                this.freq = (this.freq + 1) % (this.distance + 1)
            }
        }

        // Just "rotate" NUM_DROPS to reduce object management overhead.
        let rain: Raindrop[] = []
        const NUM_DROPS: number = 10

        for (let i = 0; i < NUM_DROPS; i++) {
            let x: number
            let y: number
            if (Math.randomBoolean()) {
                x = 0
                y = Math.randomRange(0, 4)
            } else {
                x = Math.randomRange(0, 4)
                y = 0
            }
            let raindrop = new Raindrop(x, y, Math.randomRange(0, 4)) // x < 0 might clamp to 0
            raindrop.turnRight(45)
            rain.push(raindrop)
        }

        basic.forever(function () {
            for (let i = 0; i < NUM_DROPS; i++) {
                // Randomize the distance and x location of a sprite that is done falling.
                if (rain[i].y() >= 4) {
                    rain[i].setDist(Math.randomRange(0, 4))
                    let x: number
                    let y: number
                    if (Math.randomBoolean()) {
                        x = 0
                        y = Math.randomRange(0, 4)
                    } else {
                        x = Math.randomRange(0, 4)
                        y = 0
                    }
                    rain[i].setX(x)
                    rain[i].setY(y)
                } else {
                    rain[i].fall()
                }
            }
        })
    })
}
// Rain Screensaver End

//In-And-Out Screensaver Start
//Circular code found on makecode.microbit.org
//Linear additions added
if (!working) {
    input.onGesture(Gesture.ThreeG, function () {
        basic.forever(function () {
            for (let x = 0; x <= 4; x++) {
                led.plot(x, 0) //Plots each point at the designated area
                led.plot(0, 4 - x)
                led.plot(4 - x, 4)
                led.plot(4, x)
                led.plot(2, x)
                led.plot(2, 4 - x)
                led.plot(x, 2)
                led.plot(4 - x, 2)
                basic.pause(50)
                led.unplot(x, 0) //unplots each point at the same area as above, created aflashing effect
                led.unplot(4 - x, 4)
                led.unplot(0, 4 - x)
                led.unplot(4, x)
                led.unplot(2, x)
                led.unplot(2, 4 - x)
                led.unplot(x, 2)
                led.unplot(4 - x, 2)
                basic.pause(50)
            }
        })
    })
}
// In-And-Out Screensaver End
